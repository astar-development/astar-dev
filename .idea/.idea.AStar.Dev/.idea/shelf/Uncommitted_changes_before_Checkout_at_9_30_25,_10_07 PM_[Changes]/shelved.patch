Index: src/services/astar-dev-database-updater/AStar.Dev.Database.Updater.Core/AddNewFilesService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Globalization;\nusing System.IO.Abstractions;\nusing System.Text.RegularExpressions;\nusing AStar.Dev.Database.Updater.Core.Classifications;\nusing AStar.Dev.Functional.Extensions;\nusing AStar.Dev.Infrastructure.FilesDb.Data;\nusing AStar.Dev.Infrastructure.FilesDb.Models;\nusing AStar.Dev.Utilities;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing SkiaSharp;\n\nnamespace AStar.Dev.Database.Updater.Core;\n\n/// <summary>\n///     The <see cref=\"AddNewFilesService\" /> class\n/// </summary>\n/// <param name=\"fileSystem\">An instance of <see cref=\"IFileSystem\" /> to retrieve the files from</param>\n/// <param name=\"config\">An instance of the <see cref=\"DatabaseUpdaterConfiguration\" /> options used to configure the addition of the new files</param>\n/// <param name=\"filesContext\">An instance of the <see cref=\"FilesContext\" /></param>\n/// <param name=\"classificationRepository\">An instance of the <see cref=\"ClassificationRepository\" /> </param>\n/// <param name=\"logger\">An instance of the <see cref=\"ILogger\" /> to log status / errors</param>\npublic class AddNewFilesService(\n    IFileSystem                            fileSystem,\n    IOptions<DatabaseUpdaterConfiguration> config,\n    ClassificationRepository               classificationRepository,\n    FilesContext                           filesContext,\n    ILogger<AddNewFilesService>            logger)\n{\n    /// <summary>\n    ///     The StartAsync method is called by the runtime (via the BackgroundWorker) and will update the database with any new files\n    /// </summary>\n    /// <param name=\"stoppingToken\">A cancellation token to optionally cancel the operation</param>\n    public async Task<Result<int, ErrorResponse>> StartAsync(CancellationToken stoppingToken)\n    {\n        var enumerationOptions = new EnumerationOptions { IgnoreInaccessible = true, RecurseSubdirectories = true, ReturnSpecialDirectories = false };\n        var classifications    = classificationRepository.GetExistingClassifications();\n\n        return await GetFileList(enumerationOptions)\n                     .BindAsync(async fileList => await ProcessNewFiles(fileList, classifications, stoppingToken))\n                     .MapFailureAsync(x => new ErrorResponse(x.Message));\n    }\n\n    private Result<string[], ErrorResponse> GetFileList(EnumerationOptions enumerationOptions)\n        => Try.Run(() => fileSystem.Directory.EnumerateFiles(config.Value.RootDirectory, \"*\", enumerationOptions).ToArray()).ToErrorResponse();\n\n    private async Task<Result<int, ErrorResponse>> ProcessNewFiles(string[] files, List<FileClassification> fileClassifications, CancellationToken stoppingToken)\n    {\n        logger.LogInformation(\"Processing {FileCount} potentially new files...\", files.Length);\n        var count = 0;\n\n        var fileChunks = files.Chunk(100);\n\n        foreach(var fileChunk in fileChunks)\n        {\n            var first = fileChunk[0];\n            logger.LogInformation(\"Processing potentially new file {File}...\", first);\n            var filesAlreadyInTheContext = await filesContext.Files.AsNoTracking().Select(f => f.FullNameWithPath).ToListAsync(stoppingToken);\n            var filesToProcess           = fileChunk.Except(filesAlreadyInTheContext).ToArray();\n\n            count = filesToProcess.Aggregate(count, (current, file) => ProcessNewFile(fileClassifications, file, current));\n\n            await filesContext.SaveChangesAsync(stoppingToken);\n        }\n\n        return new Result<int, ErrorResponse>.Ok(count);\n    }\n\n    private int ProcessNewFile(List<FileClassification> fileClassifications, string file, int count)\n    {\n        var fileInfo                = fileSystem.FileInfo.New(file);\n        var fileWithClassifications = UpdateFileDetailWithClassifications(fileClassifications, fileInfo, file);\n\n        if(file.IsImage())\n        {\n            UpdateFileDetailsForImage(file, fileWithClassifications);\n        }\n\n        if(IsNotAnExistingFileInTheContext(fileWithClassifications))\n        {\n            count++;\n            filesContext.Files.Add(fileWithClassifications);\n        }\n\n        var newCount = UpdateFileContext(file, count, fileWithClassifications);\n\n        return newCount;\n    }\n\n    private int UpdateFileContext(string file, int count, FileDetail fileWithClassifications)\n    {\n        var newCount = 0;\n\n        try\n        {\n            newCount = TryContextUpdate(file, count);\n        }\n        catch(DbUpdateException exception) when(exception.GetBaseException().Message.Contains(\"IX_FileDetail_FileHandle\"))\n        {\n            RetryContextUpdate(fileWithClassifications);\n        }\n\n        return newCount;\n    }\n\n    private int TryContextUpdate(string file, int count)\n    {\n        if(count <= 100)\n        {\n            return count;\n        }\n\n        count = 0;\n\n        var totalFilesCount = filesContext.Files.Count();\n        logger.LogInformation(\"Saving {FileName} at {StartTime} (UTC)... Total Files: {TotalFilesCount}\", file, DateTime.UtcNow, totalFilesCount);\n\n        return count;\n    }\n\n    private void RetryContextUpdate(FileDetail fileWithClassifications)\n    {\n        try\n        {\n            var countFileHandle2 = filesContext.Files.Count(fileDetail => fileDetail.FileHandle == fileWithClassifications.FileHandle) + Random.Shared.Next(5_000, 500_000);\n            fileWithClassifications.FileHandle = FileHandle.Create($\"{countFileHandle2}-{fileWithClassifications.FileHandle}\");\n        }\n        catch(Exception exception2)\n        {\n            var exToLog = new Exception(exception2.GetBaseException().Message); // full exception is too large to log \"as is\" - come back to this...\n            logger.LogError(exToLog, \"An exception occured while executing file service. Error was: {ErrorMessage} - retry failed\", exToLog.Message);\n        }\n    }\n\n    private static FileDetail UpdateFileDetailWithClassifications(List<FileClassification> fileClassifications, IFileInfo fileInfo, string file)\n    {\n        var fileWithClassifications = new FileDetail(fileInfo) { FileClassifications = [], FileAccessDetail = { DetailsLastUpdated = DateTime.UtcNow } };\n\n        foreach(var fileClassification in GetFileClassifications(fileClassifications, file))\n        {\n            fileWithClassifications.FileClassifications.Add(fileClassification);\n        }\n\n        var fileClassificationsCount = fileWithClassifications.FileClassifications.Count;\n\n        fileWithClassifications.FileHandle = GenerateFileHandle(fileInfo, fileClassificationsCount, fileWithClassifications);\n\n        return fileWithClassifications;\n    }\n\n    private static IEnumerable<FileClassification> GetFileClassifications(List<FileClassification> fileClassifications, string file)\n        => from fileClassification in fileClassifications\n           from fileNamePart in fileClassification.FileNameParts\n           where file.Contains(fileNamePart.Text)\n           select fileClassification;\n\n    private bool IsNotAnExistingFileInTheContext(FileDetail fileWithClassifications) =>\n        !filesContext.Files.Any(f => f.DirectoryName == fileWithClassifications.DirectoryName && f.FileName == fileWithClassifications.FileName);\n\n    private static void UpdateFileDetailsForImage(string file, FileDetail fileDetail)\n    {\n        fileDetail.IsImage = true;\n        var image = SKImage.FromEncodedData(file);\n\n        if(image is null)\n        {\n            return;\n        }\n\n        fileDetail.ImageDetail = new(image.Width, image.Height);\n    }\n\n    private static FileHandle GenerateFileHandle(IFileInfo fileInfo, int fileClassificationsCount, FileDetail fileWithClassifications)\n    {\n        var fileHandle = $\"{GenerateRandomNumeric()}-{GenerateFileHandle(fileInfo.Name).Value}\";\n\n        if(fileClassificationsCount <= 1)\n        {\n            return FileHandle.Create(fileHandle.TruncateIfRequired(350));\n        }\n\n        var firstRandom  = new Random(DateTime.Now.Millisecond).Next(1, fileClassificationsCount);\n        var prefix       = fileWithClassifications.FileClassifications.Skip(firstRandom).FirstOrDefault()?.FileNameParts.FirstOrDefault()?.Text;\n        var secondRandom = new Random(DateTime.Now.Millisecond).Next(1, fileClassificationsCount);\n        var prefix2      = fileWithClassifications.FileClassifications.Skip(secondRandom).FirstOrDefault()?.FileNameParts.FirstOrDefault()?.Text;\n\n        fileHandle = UpdateFileHandle(fileInfo, prefix, prefix2);\n\n        return GenerateFileHandle(fileHandle.TruncateIfRequired(350));\n    }\n\n    private static string UpdateFileHandle(IFileInfo fileInfo, string? prefix, string? prefix2)\n        => prefix switch\n           {\n               { Length: > 0 } when prefix2 is { Length: > 0 } && prefix != prefix2 => GenerateHandleWithTwoPrefixes(fileInfo, prefix, prefix2),\n               { Length: > 0 }                                                      => GenerateHandleWithOnePrefix(fileInfo, prefix),\n               _                                                                    => GenerateHandleWithoutPrefixes(fileInfo)\n           };\n\n    private static string GenerateHandleWithoutPrefixes(IFileInfo fileInfo) => $\"{GenerateRandomNumeric()}-{GenerateFileHandle(fileInfo.Name)}\";\n\n    private static string GenerateHandleWithOnePrefix(IFileInfo fileInfo, string prefix) => $\"{GenerateRandomNumeric()}-{prefix}-{GenerateFileHandle(fileInfo.Name)}\";\n\n    private static string GenerateHandleWithTwoPrefixes(IFileInfo fileInfo, string prefix, string prefix2) => $\"{GenerateRandomNumeric()}-{prefix}-{prefix2}-{GenerateFileHandle(fileInfo.Name)}\";\n\n    private static int GenerateRandomNumeric() => Random.Shared.Next(5_000, 500_000);\n\n    private static FileHandle GenerateFileHandle(string file)\n    {\n        var newHandle = Regex.Replace(Path.GetInvalidPathChars()\n                                          .Aggregate(file, (current, illegalCharacter) => current.Replace(illegalCharacter, '-'))\n                                          .Replace(\"/\", \"-\")\n                                          .Replace(\" \", \"-\")\n                                          .Replace(\"_\", \"-\")\n                                          .Replace(\"(\", \"-\")\n                                          .Replace(\")\", \"-\")\n                                          .Replace(\"+\", \"-\")\n                                          .Replace(\".\", \"-\")\n                                          .Replace(\",\", \"-\")\n                                          .ToLower(CultureInfo.InvariantCulture)\n                                          .Replace(\"sammy\", \"sam\"), @\"(-+)\", \"-\", RegexOptions.Compiled, TimeSpan.FromMilliseconds(100));\n\n        return FileHandle.Create(newHandle.StartsWith(\"-\", StringComparison.OrdinalIgnoreCase)\n                                     ? newHandle[1..]\n                                     : newHandle);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/services/astar-dev-database-updater/AStar.Dev.Database.Updater.Core/AddNewFilesService.cs b/src/services/astar-dev-database-updater/AStar.Dev.Database.Updater.Core/AddNewFilesService.cs
--- a/src/services/astar-dev-database-updater/AStar.Dev.Database.Updater.Core/AddNewFilesService.cs	(revision a0624caa072cc2e853b0ec6845c77d749e619737)
+++ b/src/services/astar-dev-database-updater/AStar.Dev.Database.Updater.Core/AddNewFilesService.cs	(date 1759266142472)
@@ -79,6 +79,7 @@
 
         if(IsNotAnExistingFileInTheContext(fileWithClassifications))
         {
+            fileWithClassifications.Id = new() { Value = Guid.CreateVersion7() };
             count++;
             filesContext.Files.Add(fileWithClassifications);
         }

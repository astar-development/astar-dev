@page "/basicform-fluentui-components"
@using FluentUI.Demo.Shared
@using FluentUI.Demo.Shared.SampleData
@using App = App
@using Starship = Starship

<PageTitle>@App.PageTitle("Basic Form FluentUI")</PageTitle>

<h1>Starfleet Starship Database</h1>
<p>
    This form uses the Fluent UI input components. It uses a <code>DataAnnotationsValidator</code>, a <code>FluentValidationSummary</code>
    and <code>FluentValidationMessage</code>s.
</p>

<h2>New Ship Entry Form</h2>

<EditForm Model="@Starship" OnValidSubmit="@HandleValidSubmit" FormName="starship_fluent_entry" novalidate>
    <DataAnnotationsValidator/>
    <FluentValidationSummary/>

    <FluentStack Orientation="Orientation.Vertical">
        <div>
            <FluentTextField Name="identifier" @bind-Value="Starship.Identifier" Label="Identifier" Required/>
            <FluentValidationMessage For="@(() => Starship.Identifier)"/>
        </div>
        <div>
            <FluentTextArea Name="description" Rows="5" Cols="60" @bind-Value="Starship.Description" Label="Description (optional)" Required/>
            <FluentValidationMessage For="@(() => Starship.Description)"/>
        </div>
        <div>
            <FluentAutocomplete TOption="Country"
                                Name="countries"
                                AutoComplete="off"
                                Required
                                Label="Select countries"
                                Width="250px"
                                Placeholder="Select countries"
                                OnOptionsSearch="@OnSearchAsync"
                                MaximumSelectedOptions="3"
                                OptionText="@(item => item.Name)"
                                Multiple="true"
                                @bind-SelectedOptions="@Starship.Countries"/>
            <FluentValidationMessage For="@(() => Starship.Countries)"/>
        </div>
        <div>
            <FluentSelect Name="class" Id="classification" @bind-Value="Starship.Classification" TOption="string" Required Label="Primary Classification">
                <FluentOption Value="">Select classification ...</FluentOption>
                <FluentOption Value="Exploration">Exploration</FluentOption>
                <FluentOption Value="Diplomacy">Diplomacy</FluentOption>
                <FluentOption Value="Defense">Defense</FluentOption>
            </FluentSelect>
            <FluentValidationMessage For="@(() => Starship.Classification)"/>
        </div>
        <div>
            <FluentNumberField Name="accomodation" @bind-Value="Starship.MaximumAccommodation" Label="Maximum Accommodation" Required/>
            <FluentValidationMessage For="@(() => Starship.MaximumAccommodation)"/>
        </div>
        <div>
            <FluentCheckbox Name="approved" @bind-Value="Starship.IsValidatedDesign" Required Label="Engineering approval"/>
            <FluentValidationMessage For="@(() => Starship.IsValidatedDesign)"/>
        </div>
        <div>
            <FluentDatePicker Name="production_date" Id="proddate" @bind-Value="Starship.ProductionDate" Label="Production Date" Required/>
            <FluentValidationMessage For="@(() => Starship.ProductionDate)"/>
        </div>
        <div>
            <FluentSwitch Name="teleporter" @bind-value="Starship.HasTeleporter" Label="Teleporter" CheckedMessage="Fully operational" UncheckedMessage="Under maintenance"/>
            <FluentValidationMessage For="@(() => Starship.HasTeleporter)"/>
        </div>
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
    </FluentStack>
</EditForm>

<div style="margin-top: 3rem;"><a href="http://www.startrek.com/">Star Trek</a>, Â©1966-2023 CBS Studios, Inc. and <a href="https://www.paramount.com">Paramount Pictures</a></div>

@code {

    protected override void OnInitialized()
    {
        Starship.ProductionDate = DateTime.Now;
    }

    IEnumerable<Country> SelectedItems = [];

    private async Task OnSearchAsync(OptionsSearchEventArgs<Country> e)
    {
        await Task.Delay(1);

        IList<Country> allCountries = [new("UK", "UK", new())];

        e.Items = allCountries.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
                              .OrderBy(i => i.Name);
    }

    [SupplyParameterFromForm]
    private Starship Starship { get; } = new();

    private void HandleValidSubmit()
    {
        DemoLogger.WriteLine("HandleValidSubmit called");

        // Process the valid form
    }

}


<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStar.Dev.Database.Updater.Core</name>
    </assembly>
    <members>
        <member name="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationBuilder">
            <summary>
                Responsible for constructing FileClassification and FileNamePart entities.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationBuilder.CreateClassification(System.String,AStar.Dev.Database.Updater.Core.Models.ClassificationMapping)">
            <summary>
                Creates a new FileClassification from a mapping source.
            </summary>
            <param name="name">The classification name.</param>
            <param name="source">The source mapping containing metadata.</param>
            <returns>A new FileClassification instance.</returns>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationBuilder.CreateMissingParts(System.Collections.Generic.IEnumerable{AStar.Dev.Database.Updater.Core.Models.ClassificationMapping},System.Collections.Generic.HashSet{System.String})">
            <summary>
                Creates a list of missing FileNameParts based on mappings and existing texts.
            </summary>
            <param name="mappings">Mappings to extract file name parts from.</param>
            <param name="existingTexts">Set of already existing file name texts.</param>
            <returns>List of new FileNamePart entities.</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationMappingExtensions">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationMappingExtensions" /> containing the ClassificationMapping extensions
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationMappingExtensions.AddFileClassificationsAsync(System.Collections.Generic.IEnumerable{AStar.Dev.Database.Updater.Core.Models.ClassificationMapping},AStar.Dev.Database.Updater.Core.Classifications.ClassificationProcessor,System.Threading.CancellationToken)">
            <summary>
                Adds classification mappings to the database context, creating missing entries.
            </summary>
            <param name="mappings">The classification mappings to process.</param>
            <param name="classificationProcessor">The ClassificationProcessor to use.</param>
            <param name="stoppingToken"></param>
            <returns><c>true</c> if successful, otherwise <c>false</c></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationProcessor">
            <summary>
                Coordinates the classification processing workflow: loading, creating, and updating.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationProcessor.#ctor(AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository,AStar.Dev.Database.Updater.Core.Classifications.ClassificationBuilder,Serilog.ILogger)">
            <summary>
                Coordinates the classification processing workflow: loading, creating, and updating.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationProcessor.ProcessAsync(System.Collections.Generic.IEnumerable{AStar.Dev.Database.Updater.Core.Models.ClassificationMapping},System.Threading.CancellationToken)">
            <summary>
                Processes classification mappings and updates the database context accordingly.
            </summary>
            <param name="mappings">The input classification mappings.</param>
            <param name="stoppingToken"></param>
            <returns>True if processing completes successfully.</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository">
            <summary>
                Handles data access for FileClassification entities using EF Core.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository.#ctor(AStar.Dev.Infrastructure.FilesDb.Data.FilesContext)">
            <summary>
                Handles data access for FileClassification entities using EF Core.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository.GetExistingClassifications(System.Collections.Generic.HashSet{System.String})">
            <summary>
                Retrieves existing classifications from the database, including their file name parts.
            </summary>
            <param name="names">Set of classification names to look up.</param>
            <returns>Dictionary of classification name to FileClassification.</returns>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository.GetExistingClassifications">
            <summary>
                Retrieves existing classifications from the database, including their file name parts.
            </summary>
            <returns>Dictionary of classification name to FileClassification.</returns>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository.AddClassifications(System.Collections.Generic.IEnumerable{AStar.Dev.Infrastructure.FilesDb.Models.FileClassification})">
            <summary>
                Adds new classifications to the database context.
            </summary>
            <param name="classifications">List of new FileClassification entities.</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationsMapper">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationsMapper" /> that handles adding any new file > database classifications
            </summary>
            <param name="configuration"></param>
            <param name="config"></param>
            <param name="logger"></param>
            <remarks>Before we can progress to testing this, we need to change the ClassificationsMapper to be more testable</remarks>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationsMapper.#ctor(Microsoft.Extensions.Options.IOptions{AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.Classifications.ClassificationsMapper})">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationsMapper" /> that handles adding any new file > database classifications
            </summary>
            <param name="configuration"></param>
            <param name="config"></param>
            <param name="logger"></param>
            <remarks>Before we can progress to testing this, we need to change the ClassificationsMapper to be more testable</remarks>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.ClassificationsMapper.LoadClassificationMappings">
            <summary>
                The LoadClassificationMappings does exactly what its name says
            </summary>
            <returns>An instance of <see cref="T:AStar.Dev.Functional.Extensions.Result`2" /> to denote the success / failure of the load</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Classifications.FileClassificationsService">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Classifications.FileClassificationsService" /> class contains the available service(s) available for the <see cref="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping" /> class
            </summary>
            <param name="serviceScopeFactory">The instance of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory" /> to obtain the required services from</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.FileClassificationsService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Classifications.FileClassificationsService" /> class contains the available service(s) available for the <see cref="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping" /> class
            </summary>
            <param name="serviceScopeFactory">The instance of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory" /> to obtain the required services from</param>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Classifications.FileClassificationsService.ClassificationsLoading">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.FileClassificationsService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Classifications.FileClassificationsService.AddNewMappingsToTheDatabase(System.Threading.CancellationToken)">
            <summary>
                The AddNewMappingsToTheDatabase method will process the mappings and add any new mappings to the context
            </summary>
            <param name="stoppingToken">A cancellation token to optionally cancel the operation</param>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration" /> containing the applicable Database Updater configuration
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.ConfigurationSectionName">
            <summary>
                Gets the name of the configuration section as specified in the appSettings.json
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.RootDirectory">
            <summary>
                Gets or sets the Root directory - where the updater will start looking for files
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.HonourFirstDelay">
            <summary>
                Gets or sets whether to honour (i.e.: not skip) the first delay of the scheduled run.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.MappingsFilePath">
            <summary>
                Gets or sets the full path (including the name) of the CSV Mappings file
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.SoftDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the soft-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.HardDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the hard-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.NewFilesScheduledTime">
            <summary>
                Gets or sets the time to start the new files addition
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelBacklogHealthCheck">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelBacklogHealthCheck.#ctor(AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel{AStar.Dev.Infrastructure.FilesDb.Models.FileDetail},System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="channel"></param>
            <param name="warningThreshold"></param>
            <param name="criticalThreshold"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelBacklogHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelBacklogTracker">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelBacklogTracker.Count">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelBacklogTracker.Increment">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelBacklogTracker.Decrement">
            <summary>
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelReadBatch">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ChannelReadBatch.ReadBatchImmediateAsync``1(System.Threading.Channels.ChannelReader{``0},System.Int32)">
            <summary>
                Consumes the items in the channel in batches. Each batch contains all
                the items that are immediately available, up to a specified maximum number.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.DatabaseWriter">
            <summary>
            </summary>
            <param name="reader"></param>
            <param name="serviceScopeFactory"></param>
            <param name="batchSize"></param>
            <param name="logger"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.DatabaseWriter.#ctor(System.Threading.Channels.ChannelReader{AStar.Dev.Infrastructure.FilesDb.Models.FileDetail},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,System.Int32,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.FileKeywordProcessor.DatabaseWriter})">
            <summary>
            </summary>
            <param name="reader"></param>
            <param name="serviceScopeFactory"></param>
            <param name="batchSize"></param>
            <param name="logger"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.DatabaseWriter.ConsumeAsync(System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.EfKeywordProvider">
            <summary>
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.EfKeywordProvider.#ctor(AStar.Dev.Infrastructure.FilesDb.Data.FilesContext)">
            <summary>
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.EfKeywordProvider.GetKeywordsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileKeywordProcessorService">
            <summary>
            </summary>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileKeywordProcessorService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            </summary>
            <param name="serviceScopeFactory"></param>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileKeywordProcessorService.FileKeywordProcessorRunning">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileKeywordProcessorService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Id">
            <summary>
                Gets or sets the unique identifier for the <see cref="T:AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart" /> entity.
                This property serves as the primary key in the database to distinguish
                each record of file name parts.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Text">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Name">
            <summary>
                Gets or sets the name of the file classification.
                This property represents the descriptive label for a specific classification
                and is often used to identify or categorize files within the database.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Celebrity">
            <summary>
                Gets or sets a value indicating whether the file classification is considered a "Celebrity."
                This property is used to mark specific classifications with special significance.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.IncludeInSearch">
            <summary>
                Gets or sets a value indicating whether this classification should be included in search results.
                This property determines if files associated with this classification are considered searchable.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.FileNameParts">
            <summary>
                Gets or sets the collection of file name parts associated with the file classification.
                This property represents the one-to-many relationship between a file classification
                and its constituent parts that define or describe its naming structure.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileScanner">
            <summary>
            </summary>
            <param name="serviceScopeFactory"></param>
            <param name="classificationRepository"></param>
            <param name="keywordProvider"></param>
            <param name="writer"></param>
            <param name="tracker"></param>
            <param name="logger"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileScanner.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository,AStar.Dev.Database.Updater.Core.FileKeywordProcessor.IKeywordProvider,System.Threading.Channels.ChannelWriter{AStar.Dev.Infrastructure.FilesDb.Models.FileDetail},AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputTracker,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileScanner})">
            <summary>
            </summary>
            <param name="serviceScopeFactory"></param>
            <param name="classificationRepository"></param>
            <param name="keywordProvider"></param>
            <param name="writer"></param>
            <param name="tracker"></param>
            <param name="logger"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileScanner.ScanFilesAsync(System.Collections.Generic.List{AStar.Dev.Infrastructure.FilesDb.Models.FileDetail},System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="filesToProcess"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.IKeywordProvider">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.IKeywordProvider.GetKeywordsAsync(System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.KeywordRegexBuilder">
            <summary>
                Provides helpers for building keyword regex patterns.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.KeywordRegexBuilder.BuildKeywordPattern(System.Collections.Generic.IReadOnlyList{AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications})">
            <summary>
                Builds a regex pattern that matches both single-word and multi-word keywords.
                Single words and multi-word phrases are wrapped in \b boundaries.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputHealthCheck">
            <summary>
                Health check that reports degraded if throughput falls below a threshold.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputHealthCheck.#ctor(AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputTracker,System.TimeSpan,System.Int32)">
            <summary>
                Health check that reports degraded if throughput falls below a threshold.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputTracker">
            <summary>
                Tracks throughput events over time using a TimeProvider.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputTracker.#ctor(System.TimeProvider)">
            <summary>
                Tracks throughput events over time using a TimeProvider.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputTracker.RecordEvent">
            <summary>
                Records a new event at the current time.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.ThroughputTracker.CountEventsInWindow(System.TimeSpan)">
            <summary>
                Returns the number of events within the given time window.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1">
            <summary>
                A channel wrapper that tracks backlog count while delegating to an inner channel.
                Ensures items are non-null via a generic non-null constraint.
            </summary>
            <typeparam name="T">The non-nullable item type.</typeparam>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.#ctor(System.Threading.Channels.Channel{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1" /> class.
            </summary>
            <param name="inner">The inner channel to wrap.</param>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.Writer">
            <summary>
                Gets the tracked writer.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.Reader">
            <summary>
                Gets the tracked reader.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.Count">
            <summary>
                Gets the current backlog count.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingWriter">
            <summary>
                A writer that increments backlog count when items are written.
                Disallows null writes by contract.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingWriter.TryWrite(`0)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingWriter.WriteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingWriter.WaitToWriteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingReader">
            <summary>
                A reader that decrements backlog count when items are read.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingReader.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingReader.ReadAllAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingReader.TryRead(`0@)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingReader.WaitToReadAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.TrackedChannel`1.TrackingReader.TryPeek(`0@)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Files.AddNewFilesBackgroundService">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Files.AddNewFilesBackgroundService" /> class
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> required by the AddNewFilesBackgroundService</param>
            <param name="timeDelay"></param>
            <param name="config"></param>
            <param name="logger">An instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to log status / errors</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Files.AddNewFilesBackgroundService.#ctor(System.IServiceProvider,AStar.Dev.Database.Updater.Core.TimeDelay,Microsoft.Extensions.Options.IOptions{AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration},Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.Files.AddNewFilesBackgroundService})">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Files.AddNewFilesBackgroundService" /> class
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> required by the AddNewFilesBackgroundService</param>
            <param name="timeDelay"></param>
            <param name="config"></param>
            <param name="logger">An instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to log status / errors</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Files.AddNewFilesBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
                The StartAsync method is called by the runtime and will update the database with any new files
            </summary>
            <param name="stoppingToken">A cancellation token to optionally cancel the operation</param>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Files.AddNewFilesService">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Files.AddNewFilesService" /> class
            </summary>
            <param name="fileSystem">An instance of <see cref="T:System.IO.Abstractions.IFileSystem" /> to retrieve the files from</param>
            <param name="config">An instance of the <see cref="T:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration" /> options used to configure the addition of the new files</param>
            <param name="filesContext">An instance of the <see cref="T:AStar.Dev.Infrastructure.FilesDb.Data.FilesContext" /></param>
            <param name="classificationRepository">An instance of the <see cref="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository" /> </param>
            <param name="logger">An instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to log status / errors</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Files.AddNewFilesService.#ctor(System.IO.Abstractions.IFileSystem,Microsoft.Extensions.Options.IOptions{AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration},AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository,AStar.Dev.Infrastructure.FilesDb.Data.FilesContext,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.Files.AddNewFilesService})">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Files.AddNewFilesService" /> class
            </summary>
            <param name="fileSystem">An instance of <see cref="T:System.IO.Abstractions.IFileSystem" /> to retrieve the files from</param>
            <param name="config">An instance of the <see cref="T:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration" /> options used to configure the addition of the new files</param>
            <param name="filesContext">An instance of the <see cref="T:AStar.Dev.Infrastructure.FilesDb.Data.FilesContext" /></param>
            <param name="classificationRepository">An instance of the <see cref="T:AStar.Dev.Database.Updater.Core.Classifications.ClassificationRepository" /> </param>
            <param name="logger">An instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to log status / errors</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Files.AddNewFilesService.FindNewFilesAndAddToDatabaseAsync(System.Threading.CancellationToken)">
            <summary>
                The FindNewFilesAndAddToDatabaseAsync method is called to update the database with any new files
            </summary>
            <param name="stoppingToken">A cancellation token to optionally cancel the operation</param>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration">
            <summary>
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration.SectionLocation">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration.Directories">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping" /> class
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.FileNameContains">
            <summary>
                Gets or sets a section of text that should exist in the filename for this mapping to apply
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.DatabaseMapping">
            <summary>
                Gets or sets the text to store in the database for this mapping
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.Celebrity">
            <summary>
                Gets or sets whether this mapping is for someone no-one knows... joke!
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.Searchable">
            <summary>
                Gets or sets whether the mapping is searchable
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration" /> containing the applicable Database Updater configuration
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.ConfigurationSectionName">
            <summary>
                Gets the name of the configuration section as specified in the appSettings.json
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.RootDirectory">
            <summary>
                Gets or sets the Root directory - where the updater will start looking for files
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.MappingsFilePath">
            <summary>
                Gets or sets the full path (including the name) of the CSV Mappings file
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.SoftDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the soft-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.HardDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the hard-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.NewFilesScheduledTime">
            <summary>
                Gets or sets the time to start the new files addition
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.HonourFirstDelay">
            <summary>
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChange">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChange" /> to control the directory change
            </summary>
            <param name="Old">The name of the old directory</param>
            <param name="New">The name of the new directory</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.#ctor(System.String,System.String)">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChange" /> to control the directory change
            </summary>
            <param name="Old">The name of the old directory</param>
            <param name="New">The name of the new directory</param>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.Old">
            <summary>The name of the old directory</summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.New">
            <summary>The name of the new directory</summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges" /> used to contain the list of available directories - not sure if this will be used
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges.SectionLocation">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges.Directories">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Shared.TimeDelay">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Shared.TimeDelay" /> class
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Shared.TimeDelay.CalculateDelayToNextRun(System.TimeOnly,System.Boolean)">
            <summary>
                The CalculateDelayToNextRun will return the <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time
            </summary>
            <param name="targetTime">The target time to delay until</param>
            <param name="honourFirstDelay"></param>
            <returns>The <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.TimeDelay">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.TimeDelay" /> class
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.TimeDelay.#ctor(System.TimeProvider,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.TimeDelay})">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.TimeDelay" /> class
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.TimeDelay.CalculateDelayToNextRun(System.TimeOnly,System.Boolean)">
            <summary>
                The CalculateDelayToNextRun will return the <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time
                This implementation doesn't need the ErrorResponse so doesn't "need" the result at all
            </summary>
            <param name="targetTime">The target time to delay until</param>
            <param name="valueHonourFirstDelay"></param>
            <returns>The <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time</returns>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStar.Dev.Database.Updater.Core</name>
    </assembly>
    <members>
        <member name="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationBuilder">
            <summary>
                Responsible for constructing FileClassification and FileNamePart entities.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationBuilder.CreateClassification(System.String,AStar.Dev.Database.Updater.Core.Models.ClassificationMapping)">
            <summary>
                Creates a new FileClassification from a mapping source.
            </summary>
            <param name="name">The classification name.</param>
            <param name="source">The source mapping containing metadata.</param>
            <returns>A new FileClassification instance.</returns>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationBuilder.CreateMissingParts(System.Collections.Generic.IEnumerable{AStar.Dev.Database.Updater.Core.Models.ClassificationMapping},System.Collections.Generic.HashSet{System.String})">
            <summary>
                Creates a list of missing FileNameParts based on mappings and existing texts.
            </summary>
            <param name="mappings">Mappings to extract file name parts from.</param>
            <param name="existingTexts">Set of already existing file name texts.</param>
            <returns>List of new FileNamePart entities.</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationMappingExtensions">
            <summary>
                The
                <see cref="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationMappingExtensions"/>
                containing the ClassificationMapping extensions
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationMappingExtensions.AddFileClassificationsAsync(System.Collections.Generic.IEnumerable{AStar.Dev.Database.Updater.Core.Models.ClassificationMapping},AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationProcessor,System.Threading.CancellationToken)">
            <summary>
                Adds classification mappings to the database context, creating missing entries.
            </summary>
            <param name="mappings">The classification mappings to process.</param>
            <param name="classificationProcessor">The ClassificationProcessor to use.</param>
            <param name="stoppingToken"></param>
            <returns><c>true</c> if successful, otherwise <c>false</c></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationProcessor">
            <summary>
                Coordinates the classification processing workflow: loading, creating, and updating.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationProcessor.#ctor(AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationRepository,AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationBuilder,Serilog.ILogger)">
            <summary>
                Coordinates the classification processing workflow: loading, creating, and updating.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationProcessor.ProcessAsync(System.Collections.Generic.IEnumerable{AStar.Dev.Database.Updater.Core.Models.ClassificationMapping},System.Threading.CancellationToken)">
            <summary>
                Processes classification mappings and updates the database context accordingly.
            </summary>
            <param name="mappings">The input classification mappings.</param>
            <param name="stoppingToken"></param>
            <returns>True if processing completes successfully.</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationRepository">
            <summary>
                Handles data access for FileClassification entities using EF Core.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationRepository.#ctor(AStar.Dev.Infrastructure.FilesDb.Data.FilesContext)">
            <summary>
                Handles data access for FileClassification entities using EF Core.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationRepository.GetExistingClassifications(System.Collections.Generic.HashSet{System.String})">
            <summary>
                Retrieves existing classifications from the database, including their file name parts.
            </summary>
            <param name="names">Set of classification names to look up.</param>
            <returns>Dictionary of classification name to FileClassification.</returns>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationRepository.GetExistingClassifications">
            <summary>
                Retrieves existing classifications from the database, including their file name parts.
            </summary>
            <returns>Dictionary of classification name to FileClassification.</returns>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationRepository.AddClassifications(System.Collections.Generic.IEnumerable{AStar.Dev.Infrastructure.FilesDb.Models.FileClassification})">
            <summary>
                Adds new classifications to the database context.
            </summary>
            <param name="classifications">List of new FileClassification entities.</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationRepository.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationsMapper">
            <summary>
                The
                <see cref="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationsMapper"/>
                that handles adding any new file > database classifications
            </summary>
            <param name="configuration"></param>
            <param name="config"></param>
            <param name="logger"></param>
            <remarks>Before we can progress to testing this, we need to change the ClassificationsMapper to be more testable</remarks>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationsMapper.#ctor(Microsoft.Extensions.Options.IOptions{AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationsMapper})">
            <summary>
                The
                <see cref="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationsMapper"/>
                that handles adding any new file > database classifications
            </summary>
            <param name="configuration"></param>
            <param name="config"></param>
            <param name="logger"></param>
            <remarks>Before we can progress to testing this, we need to change the ClassificationsMapper to be more testable</remarks>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.ClassificationsMapper.LoadClassificationMappings">
            <summary>
                The LoadClassificationMappings does exactly what its name says
            </summary>
            <returns>An instance of <see cref="T:AStar.Dev.Functional.Extensions.Result`2" /> to denote the success / failure of the load</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.FileClassificationsBackgroundService">
            <summary>
                The
                <see cref="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.FileClassificationsBackgroundService"/>
                class contains the available service(s) available for the
                <see cref="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping"/>
                class
            </summary>
            <param name="serviceScopeFactory">The instance of
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>
                to get the required services from
            </param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.FileClassificationsBackgroundService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
                The
                <see cref="T:AStar.Dev.Database.Updater.Core.ClassificationsServices.FileClassificationsBackgroundService"/>
                class contains the available service(s) available for the
                <see cref="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping"/>
                class
            </summary>
            <param name="serviceScopeFactory">The instance of
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>
                to get the required services from
            </param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.FileClassificationsBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.ClassificationsServices.FileClassificationsBackgroundService.AddNewMappingsToTheDatabase(System.Threading.CancellationToken)">
            <summary>
                The AddNewMappingsToTheDatabase method will process the mappings and add any new mappings to the context
            </summary>
            <param name="stoppingToken">A cancellation token to optionally cancel the operation</param>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration" /> containing the applicable Database Updater configuration
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.ConfigurationSectionName">
            <summary>
                Gets the name of the configuration section as specified in the appSettings.json
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.RootDirectory">
            <summary>
                Gets or sets the Root directory - where the updater will start looking for files
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.HonourFirstDelay">
            <summary>
                Gets or sets whether to honour (i.e.: not skip) the first delay of the scheduled run.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.RunNewFilesService">
            <summary>
                Gets or sets whether to run the new files service
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.MappingsFilePath">
            <summary>
                Gets or sets the full path (including the name) of the CSV Mappings file
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.SoftDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the soft-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.HardDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the hard-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.DatabaseUpdaterConfiguration.NewFilesScheduledTime">
            <summary>
                Gets or sets the time to start the new files addition
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.EfKeywordProvider">
            <summary>
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.EfKeywordProvider.#ctor(AStar.Dev.Infrastructure.FilesDb.Data.FilesContext)">
            <summary>
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.EfKeywordProvider.GetKeywordsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileDetailsProcessorService">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileDetailsProcessorService.#ctor(AStar.Dev.Database.Updater.Core.FileDetailsServices.FileHandleService,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.FileDetailsServices.FileDetailsProcessorService})">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileDetailsProcessorService.ProcessFileDetailAsync(AStar.Dev.Infrastructure.FilesDb.Models.FileDetail,System.Collections.Generic.List{AStar.Dev.Infrastructure.FilesDb.Models.FileClassification},System.Collections.Generic.List{AStar.Dev.Infrastructure.FilesDb.Models.FileHandle},System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications})">
            <summary>
            </summary>
            <param name="fileDetail"></param>
            <param name="classifications"></param>
            <param name="fileHandlesAlreadyInTheContext"></param>
            <param name="counter"></param>
            <param name="writeCount"></param>
            <param name="keywords"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileHandleService">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileHandleService.GenerateFileHandle(System.String)">
            <summary>
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileHandleService.GenerateFileHandle(AStar.Dev.Infrastructure.FilesDb.Models.FileDetail,System.Collections.Generic.List{AStar.Dev.Infrastructure.FilesDb.Models.FileHandle})">
            <summary>
            </summary>
            <param name="fileInfo"></param>
            <param name="fileHandlesAlreadyInTheContext"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileKeywordProcessorBackgroundService">
            <summary>
                Service responsible for processing keywords in files within a specified directory.
                It extends the
                <see cref="T:Microsoft.Extensions.Hosting.BackgroundService"/>
                class, enabling it to run as a
                hosted background task. The service periodically scans files for processing based
                on configurations provided at runtime.
            </summary>
            <remarks>
                This service uses dependency injection to resolve required services such as
                <see cref="T:Microsoft.Extensions.Logging.ILogger"/>, <c>FileScanner</c>, and <c>FileListService</c>.
                It coordinates the scanning and processing of files, handling scenarios including
                error logging for failed operations.
                Dependencies must be registered in the DI container before using this service.
            </remarks>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileKeywordProcessorBackgroundService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
                Service responsible for processing keywords in files within a specified directory.
                It extends the
                <see cref="T:Microsoft.Extensions.Hosting.BackgroundService"/>
                class, enabling it to run as a
                hosted background task. The service periodically scans files for processing based
                on configurations provided at runtime.
            </summary>
            <remarks>
                This service uses dependency injection to resolve required services such as
                <see cref="T:Microsoft.Extensions.Logging.ILogger"/>, <c>FileScanner</c>, and <c>FileListService</c>.
                It coordinates the scanning and processing of files, handling scenarios including
                error logging for failed operations.
                Dependencies must be registered in the DI container before using this service.
            </remarks>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileKeywordProcessorBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileListService">
            <summary>
                Service responsible for retrieving a list of file paths from a specified directory,
                excluding those already present in the database context.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileListService.#ctor(System.IO.Abstractions.IFileSystem,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
                Service responsible for retrieving a list of file paths from a specified directory,
                excluding those already present in the database context.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileListService.Get(System.String,System.Threading.CancellationToken)">
            <summary>
                Retrieves a list of file details for the files located in the specified directory path that are not already present in the database.
            </summary>
            <param name="path">The root directory path to search for files.</param>
            <param name="stoppingToken">A token to observe for any cancellation requests.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains a
                <see cref="T:AStar.Dev.Functional.Extensions.Result`2"/>
                object with a collection of file details on success or an error response
                on failure.
            </returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications.Id">
            <summary>
                Gets or sets the unique identifier for the <see cref="T:AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart" /> entity.
                This property serves as the primary key in the database to distinguish
                each record of file name parts.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications.Text">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications.Name">
            <summary>
                Gets or sets the name of the file classification.
                This property represents the descriptive label for a specific classification
                and is often used to identify or categorize files within the database.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications.Celebrity">
            <summary>
                Gets or sets a value indicating whether the file classification is considered a "Celebrity."
                This property is used to mark specific classifications with special significance.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications.IncludeInSearch">
            <summary>
                Gets or sets a value indicating whether this classification should be included in search results.
                This property determines if files associated with this classification are considered searchable.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications.FileNameParts">
            <summary>
                Gets or sets the collection of file name parts associated with the file classification.
                This property represents the one-to-many relationship between a file classification
                and its constituent parts that define or describe its naming structure.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.FilesProcessor">
            <summary>
                The FilesProcessor class is responsible for processing files to check for keywords
                or specific classifications using provided services for classification and keyword detection.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FilesProcessor.#ctor(AStar.Dev.Infrastructure.FilesDb.Data.FilesContext,AStar.Dev.Database.Updater.Core.FileDetailsServices.IKeywordProvider,AStar.Dev.Database.Updater.Core.FileDetailsServices.FileDetailsProcessorService,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.FileDetailsServices.FilesProcessor})">
            <summary>
                The FilesProcessor class is responsible for processing files to check for keywords
                or specific classifications using provided services for classification and keyword detection.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.FilesProcessor.ProcessAsync(System.Collections.Generic.IReadOnlyCollection{AStar.Dev.Infrastructure.FilesDb.Models.FileDetail},System.Threading.CancellationToken)">
            <summary>
                Processes a collection of files to process keywords, applying regex patterns to identify matches,
                and persists relevant information into the database.
            </summary>
            <param name="filesToProcess">A read-only collection of FileDetail objects representing the files to be processed.</param>
            <param name="cancellationToken">An optional token to observe while waiting for the task to complete.</param>
            <returns>
                A Result object that resolves to either:
                - A boolean indicating success (true indicates successful processing).
                - An ErrorResponse in case of a failure.
            </returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.IKeywordProvider">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.IKeywordProvider.GetKeywordsAsync(System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileDetailsServices.KeywordRegexBuilder">
            <summary>
                Provides helpers for building keyword regex patterns.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileDetailsServices.KeywordRegexBuilder.BuildKeywordPattern(System.Collections.Generic.IReadOnlyList{AStar.Dev.Database.Updater.Core.FileDetailsServices.FileNamePartsWithClassifications})">
            <summary>
                Builds a regex pattern that matches both single-word and multi-word keywords.
                Single words and multi-word phrases are wrapped in \b boundaries.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Id">
            <summary>
                Gets or sets the unique identifier for the
                <see cref="T:AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart"/>
                entity.
                This property serves as the primary key in the database to distinguish
                each record of file name parts.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Text">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Name">
            <summary>
                Gets or sets the name of the file classification.
                This property represents the descriptive label for a specific classification
                and is often used to identify or categorize files within the database.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.Celebrity">
            <summary>
                Gets or sets a value indicating whether the file classification is considered a "Celebrity."
                This property is used to mark specific classifications with special significance.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.IncludeInSearch">
            <summary>
                Gets or sets a value indicating whether this classification should be included in search results.
                This property determines if files associated with this classification are considered searchable.
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications.FileNameParts">
            <summary>
                Gets or sets the collection of file name parts associated with the file classification.
                This property represents the one-to-many relationship between a file classification
                and its constituent parts that define or describe its naming structure.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.KeywordRegexBuilder">
            <summary>
                Provides helpers for building keyword regex patterns.
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.FileKeywordProcessor.KeywordRegexBuilder.BuildKeywordPattern(System.Collections.Generic.IReadOnlyList{AStar.Dev.Database.Updater.Core.FileKeywordProcessor.FileNamePartsWithClassifications})">
            <summary>
                Builds a regex pattern that matches both single-word and multi-word keywords.
                Single words and multi-word phrases are wrapped in \b boundaries.
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration">
            <summary>
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration.SectionLocation">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration.Directories">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.ApiConfiguration.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping" /> class
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.FileNameContains">
            <summary>
                Gets or sets a section of text that should exist in the filename for this mapping to apply
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.DatabaseMapping">
            <summary>
                Gets or sets the text to store in the database for this mapping
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.Celebrity">
            <summary>
                Gets or sets whether this mapping is for someone no-one knows... joke!
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.ClassificationMapping.Searchable">
            <summary>
                Gets or sets whether the mapping is searchable
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration" /> containing the applicable Database Updater configuration
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.ConfigurationSectionName">
            <summary>
                Gets the name of the configuration section as specified in the appSettings.json
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.RootDirectory">
            <summary>
                Gets or sets the Root directory - where the updater will start looking for files
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.MappingsFilePath">
            <summary>
                Gets or sets the full path (including the name) of the CSV Mappings file
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.SoftDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the soft-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.HardDeleteScheduledTime">
            <summary>
                Gets or sets the time to start the hard-deletion
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.NewFilesScheduledTime">
            <summary>
                Gets or sets the time to start the new files addition
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DatabaseUpdaterConfiguration.HonourFirstDelay">
            <summary>
            </summary>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChange">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChange" /> to control the directory change
            </summary>
            <param name="Old">The name of the old directory</param>
            <param name="New">The name of the new directory</param>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.#ctor(System.String,System.String)">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChange" /> to control the directory change
            </summary>
            <param name="Old">The name of the old directory</param>
            <param name="New">The name of the new directory</param>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.Old">
            <summary>The name of the old directory</summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.New">
            <summary>The name of the new directory</summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.DirectoryChange.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges" /> used to contain the list of available directories - not sure if this will be used
            </summary>
        </member>
        <member name="F:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges.SectionLocation">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges.Directories">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Models.DirectoryChanges.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.Shared.TimeDelay">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.Shared.TimeDelay" /> class
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.Shared.TimeDelay.CalculateDelayToNextRun(System.TimeOnly,System.Boolean)">
            <summary>
                The CalculateDelayToNextRun will return the <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time
            </summary>
            <param name="targetTime">The target time to delay until</param>
            <param name="honourFirstDelay"></param>
            <returns>The <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time</returns>
        </member>
        <member name="T:AStar.Dev.Database.Updater.Core.TimeDelay">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.TimeDelay" /> class
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.TimeDelay.#ctor(System.TimeProvider,Microsoft.Extensions.Logging.ILogger{AStar.Dev.Database.Updater.Core.TimeDelay})">
            <summary>
                The <see cref="T:AStar.Dev.Database.Updater.Core.TimeDelay" /> class
            </summary>
        </member>
        <member name="M:AStar.Dev.Database.Updater.Core.TimeDelay.CalculateDelayToNextRun(System.TimeOnly,System.Boolean)">
            <summary>
                The CalculateDelayToNextRun will return the <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time
                This implementation doesn't need the ErrorResponse so doesn't "need" the result at all
            </summary>
            <param name="targetTime">The target time to delay until</param>
            <param name="valueHonourFirstDelay"></param>
            <returns>The <see cref="T:System.TimeSpan" /> reresenting the delay until the next scheduled run time</returns>
        </member>
    </members>
</doc>

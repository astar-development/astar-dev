<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStar.Dev.Functional.Extensions</name>
    </assembly>
    <members>
        <member name="T:AStar.Dev.Functional.Extensions.AsyncFunctionalResult">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MapAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``2}},System.Func{``0,``1})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="map"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MapAsync``3(AStar.Dev.Functional.Extensions.Result{``0,``2},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="mapAsync"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MapAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``2}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="mapAsync"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.BindAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``2}},System.Func{``0,AStar.Dev.Functional.Extensions.Result{``1,``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="bind"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.BindAsync``3(AStar.Dev.Functional.Extensions.Result{``0,``2},System.Func{``0,System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``1,``2}}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="bindAsync"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.BindAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``2}},System.Func{``0,System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``1,``2}}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="bindAsync"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MapErrorAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``1}},System.Func{``1,``2})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="map"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TNewError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MapErrorAsync``3(AStar.Dev.Functional.Extensions.Result{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="mapAsync"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TNewError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MapErrorAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="mapAsync"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TNewError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MatchAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``1}},System.Func{``0,``2},System.Func{``1,``2})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccess"></param>
            <param name="onFailure"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MatchAsync``3(AStar.Dev.Functional.Extensions.Result{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,``2})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccessAsync"></param>
            <param name="onFailure"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MatchAsync``3(AStar.Dev.Functional.Extensions.Result{``0,``1},System.Func{``0,``2},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccess"></param>
            <param name="onFailureAsync"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MatchAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``1}},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,``2})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccessAsync"></param>
            <param name="onFailure"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MatchAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``1}},System.Func{``0,``2},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccess"></param>
            <param name="onFailureAsync"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MatchAsync``3(AStar.Dev.Functional.Extensions.Result{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccessAsync"></param>
            <param name="onFailureAsync"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.AsyncFunctionalResult.MatchAsync``3(System.Threading.Tasks.Task{AStar.Dev.Functional.Extensions.Result{``0,``1}},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccessAsync"></param>
            <param name="onFailureAsync"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.EnumerableExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.EnumerableExtensions.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <param name="sequence"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Error">
            <summary>
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Error.#ctor(System.String)">
            <summary>
            </summary>
            <param name="Message"></param>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Error.Message">
            <summary></summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Error.op_Implicit(System.String)~AStar.Dev.Functional.Extensions.Error">
            <summary>
                Do we need this?
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Error.op_Implicit(AStar.Dev.Functional.Extensions.Error)~System.String">
            <summary>
                Do we need this?
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.FunctionalResult">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.FunctionalResult.Map``3(AStar.Dev.Functional.Extensions.Result{``0,``2},System.Func{``0,``1})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="map"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.FunctionalResult.Bind``3(AStar.Dev.Functional.Extensions.Result{``0,``2},System.Func{``0,AStar.Dev.Functional.Extensions.Result{``1,``2}})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="bind"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.FunctionalResult.MapError``3(AStar.Dev.Functional.Extensions.Result{``0,``1},System.Func{``1,``2})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="map"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TNewError"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.FunctionalResult.Match``3(AStar.Dev.Functional.Extensions.Result{``0,``1},System.Func{``0,``2},System.Func{``1,``2})">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="onSuccess"></param>
            <param name="onFailure"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.None">
            <summary>
                The
                <see cref="T:AStar.Dev.Functional.Extensions.None"/>
                object which is 1 half of the possible states of
                <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
            </summary>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.None.Value">
            <summary>
                The empty value property
                <para>Check why this was added</para>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.None.Of``1">
            <summary>
                A helper method to create a
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
                in a more fluent style
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <returns>An instance of
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
                where T is the specified type
            </returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.None`1">
            <summary>
                The
                <see cref="T:AStar.Dev.Functional.Extensions.None"/>
                object which is 1 half of the possible states of
                <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.None`1.ToString">
            <summary>
                Overrides the ToString method
            </summary>
            <returns>None - as a string</returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Option">
            <summary>
                The
                <see cref="T:AStar.Dev.Functional.Extensions.Option"/>
                class as the base of the discriminated union of
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                and
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Option.Optional``1(``0)">
            <summary>
                The extension method to optionally map the
                <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
                to a
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <param name="obj">The actual parameter - a runtime instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </param>
            <returns>Optionally a new
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
            </returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.OptionExtensions">
            <summary>
                The
                <see cref="T:AStar.Dev.Functional.Extensions.OptionExtensions"/>
                class containing the current extension for the
                <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Map``2(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0,``1})">
            <summary>
                The
                <see cref="M:AStar.Dev.Functional.Extensions.OptionExtensions.Map``2(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0,``1})"/>
                to map the
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                to a new instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
                if the original object was
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="obj">The actual parameter - a runtime instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </param>
            <param name="map"></param>
            <returns>The newly mapped
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or new instance of
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Filter``1(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
                The
                <see cref="M:AStar.Dev.Functional.Extensions.OptionExtensions.Filter``1(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0,System.Boolean})"/>
                (aka WHERE) to filter teh
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                based on the supplied predicate
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <param name="obj">The actual parameter - a runtime instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </param>
            <param name="predicate"></param>
            <returns>The original object when the runtime type is
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                and the object passes the predicate or an instance of
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Reduce``1(AStar.Dev.Functional.Extensions.Option{``0},``0)">
            <summary>
                The
                <see cref="M:AStar.Dev.Functional.Extensions.OptionExtensions.Reduce``1(AStar.Dev.Functional.Extensions.Option{``0},``0)"/>
                to supply the final, default, object when the
                <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
                is, in fact,
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <param name="obj">The actual parameter - a runtime instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </param>
            <param name="substitute">A substitute object to use when the runtime type is
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </param>
            <returns>The underlying object when the runtime type is
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or the substitute supplied when the runtime type is
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Reduce``1(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0})">
            <summary>
                The
                <see cref="M:AStar.Dev.Functional.Extensions.OptionExtensions.Reduce``1(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0})"/>
                to supply the final, default, object when the
                <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
                is, in fact,
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
                <para>
                    This version differs from the
                    <see cref="M:AStar.Dev.Functional.Extensions.OptionExtensions.Reduce``1(AStar.Dev.Functional.Extensions.Option{``0},``0)"/>
                    version as the default object will not be created if the
                    <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
                    is, in
                    fact,
                    <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                </para>
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <param name="obj">The actual parameter - a runtime instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </param>
            <param name="substitute">A function that can create the substitute object to use when the runtime type is
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </param>
            <returns>The underlying object when the runtime type is
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
                or the substitute created by the supplied function when the runtime type is
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Option`1">
            <summary>
                /// The
                <see cref="T:AStar.Dev.Functional.Extensions.Option`1"/>
                base class
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Option`1.op_Implicit(AStar.Dev.Functional.Extensions.None)~AStar.Dev.Functional.Extensions.Option{`0}">
            <summary>
                The implicit conversion operator to simplify creating a
                <see cref="T:AStar.Dev.Functional.Extensions.None`1"/>
            </summary>
            <param name="_">Not used</param>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Option`1.op_Implicit(`0)~AStar.Dev.Functional.Extensions.Option{`0}">
            <summary>
                The implicit conversion operator to simplify creating a
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
            </summary>
            <param name="value">The value to assign to the
                <see cref="T:AStar.Dev.Functional.Extensions.Some`1"/>
            </param>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Result`2">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TError"></typeparam>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Result`2.IsSuccess">
            <summary>
            </summary>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Result`2.Value">
            <summary>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Result`2.Error">
            <summary>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.Success(`0)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.Failure(`1)">
            <summary>
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.op_Implicit(`0)~AStar.Dev.Functional.Extensions.Result{`0,`1}">
            <summary>
                The implicit operator to create a new success Result
            </summary>
            <param name="success">The success object to set as the success value</param>
            <returns>An instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Result`2"/>
                configured as a success
            </returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.op_Implicit(`1)~AStar.Dev.Functional.Extensions.Result{`0,`1}">
            <summary>
                The implicit operator to create a new failure Result
            </summary>
            <param name="error">The error object to set as the error value</param>
            <returns>An instance of
                <see cref="T:AStar.Dev.Functional.Extensions.Result`2"/>
                configured as a failure
            </returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Some`1">
            <summary>
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Some`1.#ctor(`0)">
            <summary>
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Some`1.Content">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Some`1.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>

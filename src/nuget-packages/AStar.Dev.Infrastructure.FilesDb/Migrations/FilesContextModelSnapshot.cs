// <auto-generated />

#nullable disable

using AStar.Dev.Infrastructure.FilesDb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace AStar.Dev.Infrastructure.FilesDb.Migrations
{
    [DbContext(typeof(FilesContext))]
    partial class FilesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("files")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.DuplicatesDetails", b =>
                {
                    b.Property<DateTime>("DetailsLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileAccessDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FileHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("HardDeletePending")
                        .HasColumnType("bit");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Instances")
                        .HasColumnType("int");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastViewed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MoveRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeletePending")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_DuplicatesDetails", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EventOccurredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FileCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FileLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Events", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Celebrity")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("FileClassification", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DetailsModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTimeOffset>("FileCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileHandle")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTimeOffset>("FileLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FileLastViewed")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("HardDeletePending")
                        .HasColumnType("bit");

                    b.Property<bool>("HardDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ImageDetailsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MoveRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeletePending")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FileHandle")
                        .IsUnique();

                    b.HasIndex("ImageDetailsId");

                    b.ToTable("FileDetail", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FileClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FileClassificationId");

                    b.ToTable("FileNamePart", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.ImageDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FileDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ImageDetails", "files");
                });

            modelBuilder.Entity("FileClassificationFileDetail", b =>
                {
                    b.Property<int>("FileClassificationsId")
                        .HasColumnType("int");

                    b.Property<int>("FileDetailsId")
                        .HasColumnType("int");

                    b.HasKey("FileClassificationsId", "FileDetailsId");

                    b.HasIndex("FileDetailsId");

                    b.ToTable("FileClassificationFileDetail", "files");
                });

            modelBuilder.Entity("FileClassificationFileNamePart", b =>
                {
                    b.Property<int>("FileClassificationsId")
                        .HasColumnType("int");

                    b.Property<int>("FileNamePartsId")
                        .HasColumnType("int");

                    b.HasKey("FileClassificationsId", "FileNamePartsId");

                    b.HasIndex("FileNamePartsId");

                    b.ToTable("FileClassificationFileNamePart", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileDetail", b =>
                {
                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.ImageDetails", "ImageDetails")
                        .WithMany()
                        .HasForeignKey("ImageDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageDetails");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart", b =>
                {
                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", null)
                        .WithMany()
                        .HasForeignKey("FileClassificationId");
                });

            modelBuilder.Entity("FileClassificationFileDetail", b =>
                {
                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", null)
                        .WithMany()
                        .HasForeignKey("FileClassificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileDetail", null)
                        .WithMany()
                        .HasForeignKey("FileDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileClassificationFileNamePart", b =>
                {
                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", null)
                        .WithMany()
                        .HasForeignKey("FileClassificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart", null)
                        .WithMany()
                        .HasForeignKey("FileNamePartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
